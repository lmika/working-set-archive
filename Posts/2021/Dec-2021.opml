<?xml version="1.0"?>
<opml version="2.0">
	<head>
		<title>Working Set</title>
		<dateCreated>Mon, 11 Oct 2021 22:45:00 GMT</dateCreated>
		<flPublic>true</flPublic>
		<urlPublic>http://drummer.scripting.com/_leonmika/blog.opml</urlPublic>
		<description>A Work Journal</description>
		<copyright>© Leon Mika 2021 • Licensed under Creative Commons Attribution 4.0</copyright>
		<urlHeaderImage>https://images.workingset.net/headings/level-crossing.jpg</urlHeaderImage>
		<timeZoneOffset>+10:00</timeZoneOffset>
		<rssLink>https://workingset.net/rss.xml</rssLink>
		<urlBlogWebsite>https://workingset.net/</urlBlogWebsite>
		<urlAboutOpml>http://drummer.scripting.com/_leonmika/working-set-about.opml</urlAboutOpml>
		<urlTemplate>https://static.workingset.net/templates/index.html</urlTemplate>
		<ownerTwitterScreenName>_leonmika</ownerTwitterScreenName>
		<ownerName>Leon Mika</ownerName>
		<ownerId>http://twitter.com/_leonmika</ownerId>
		<urlUpdateSocket>ws://drummer.scripting.com:1232/</urlUpdateSocket>
		<dateModified>Tue, 04 Jan 2022 22:40:25 GMT</dateModified>
		<expansionState>1,2,4,5,8,16,18,20,23,24,25,35,36,40,42,46,48</expansionState>
		<lastCursor>61</lastCursor>
		</head>
	<body>
		<outline text="December 2021" created="Wed, 01 Dec 2021 21:26:37 GMT" name="december2021" type="calendarMonth">
			<outline text="December 31" created="Fri, 31 Dec 2021 05:15:18 GMT" type="calendarDay" name="31">
				<outline text="Hotwire Is Awesome" created="Fri, 31 Dec 2021 05:51:19 GMT" type="outline">
					<outline text="I thought I'd so some work on Auto Catalogue today.  A lot of it was just updating Go and Node packages, which was tedious but reasonably straightforward.  But I figured today I would also do something a little fun.  I thought I'd tackle the annoying reload problem with the web-player. " created="Fri, 31 Dec 2021 05:15:42 GMT"/>
					<outline text="Auto Catalogue has a very basic audio player baked into the web frontend, allowing you to play tracks that are maintained within your catalogue.  This is powered by a Stimulus controller, which wraps some basic transport UI around a simple &lt;code&gt;audio&lt;/code&gt; HTML node.  This was relatively easy to build and works quite well.  In fact, it's actually the way I consume most of my music now." created="Fri, 31 Dec 2021 05:17:02 GMT"/>
					<outline text="But there's a massive problem: going anywhere within the web-app will kill playback of any track currently playing.  The reason for this is quite simple.  The frontend of Auto Catalogue is produced server side, with HTML generated from templates.  This means that when a link is clicked, the entire page, including the &lt;code&gt;audio&lt;/code&gt; element playing the current track, will be unloaded." created="Fri, 31 Dec 2021 05:19:35 GMT"/>
					<outline text="A first pass at possible solutions to this problem would be to rewrite the UI with something like ReactJS or any of the other SPA frameworks that exist out there.  I had no real interest in doing that: it would be a lot of work and will fight against the application framework I'm actually using to build this.  I also prefer the simplicity that comes from working with server-side templates.  This is just a hobby project at the time, and I have no interest in learning (or re-learning) the intrinsic workings of whatever SPA framework is flavour of the month (it was painful enough just updating the packages)." created="Fri, 31 Dec 2021 05:24:43 GMT"/>
					<outline text="Fortunately, I didn't need to.  I heard about this other library called &lt;a href=&quot;https://turbo.hotwired.dev&quot;&gt;Turbo&lt;/a&gt; which, along with Stimulus, makes up the &lt;a href=&quot;https://hotwired.dev&quot;&gt;Hotwire&lt;/a&gt; toolkit.  This library touts the ability to replace HTML without having the browser to actually reload the page.  This library will intercept any navigation events, fetch the HTML of the new page asynchronously, and replace it on the frontend without having the browser reload the page.  This should, in theory, give you the benefits of having a SPA while still rendering HTML server side." created="Fri, 31 Dec 2021 05:27:48 GMT"/>
					<outline text="I was hoping that this will fix the web-player issue as well so I thought I'd give it a try.  And man, let me tell you; it does exactly what it says on the tin!" created="Fri, 31 Dec 2021 05:31:29 GMT"/>
					<outline text="Importing the NPM package was straightforward.  And since I was using Webpack, it was simply a matter of adding the import statement to activate it.  Running the app and looking at the browser console, the pages were indeed coming through asynchronously.  I had to move the bundled JavaScript code to the HTML head to avoid reloading it when the page changed, but doing this was the key to making it possible to fix this issue." created="Fri, 31 Dec 2021 05:32:35 GMT"/>
					<outline text="Page reloads using Turbo does cause a reload of any Stimulus controllers, but it's still possible to keep JavaScript objects around.  After replacing the HTML &lt;code&gt;audio&lt;/code&gt; tag with one created within a JavaScript object, and hiding that object away in a package that will be created only once when first requested by a Stimulus controller, I was able to keep an audio HTML element alive across page reloads, and thereby keeping the current track playing when the user moves around the site." created="Fri, 31 Dec 2021 05:35:14 GMT"/>
					<outline text="This works great!  The fact that I can have this without having to rewrite my entire UI is a credit to the maintainers of Hotwire." created="Fri, 31 Dec 2021 05:38:08 GMT"/>
					</outline>
				</outline>
			<outline text="December 29" created="Tue, 28 Dec 2021 23:08:35 GMT" type="calendarDay" name="29">
				<outline text="Unnamed Summer Project" created="Tue, 28 Dec 2021 23:39:56 GMT" type="outline">
					<outline text="Now that Feed Journaler version 0.3 has been release, it's time for a change in project.  I've got an idea for one that I'd like to explore, at least to see if it's got legs.  I don't want to say too much at this stage, other than it being a service to simplify the process of uploading and managing images for blogs created using Drummer." created="Tue, 28 Dec 2021 23:22:47 GMT"/>
					<outline text="Here's the problem statement: the images hosted on this site are served from an S3 bucket via a PagePark server.  Serving the images this way works quite well, but uploading them is a bit of a hassle, and I'm hoping to have something to manage things like downscale the image, storing it in S3, and making it public in a single action.  I'd also like an interface to browse the uploaded images so that I can preview them before adding them to the blog.  I know tools to do this exist already, but I'd prefer an online service to do this, as I'm not always on a machine which have these tools." created="Tue, 28 Dec 2021 23:26:25 GMT"/>
					<outline text="This is something that I'd sort of like to use, although I'm not too sure to what degree I'd find it useful.  I don't want to spend too much time building something that's full featured until I know it's something that I would use.  So I'm giving myself at the very most six weeks for this, with the proviso that should I not find it useful enough, I'll kill it.  Anyway, we'll see how we go." created="Tue, 28 Dec 2021 23:32:39 GMT"/>
					</outline>
				</outline>
			<outline text="December 27" created="Sun, 26 Dec 2021 22:11:48 GMT" type="calendarDay" name="27">
				<outline text="⭐️ &lt;a href=&quot;https://feedjournaler.app/blog/2021/12/version-0.3-release/&quot;&gt;Feed Journaler version 0.3&lt;/a&gt; released." created="Sun, 26 Dec 2021 22:11:49 GMT" type="outline"/>
				<outline text="Some useful points that I'd like to remember for next time I need to deal with releasing MacOS software" created="Sun, 26 Dec 2021 22:12:49 GMT" type="outline" flBulletedSubs="true">
					<outline text="The way to get to the list of already built archives is by going to &quot;Window&quot; -&gt; &quot;Organizer&quot;.  Why is it called that? 🤷 " created="Sun, 26 Dec 2021 22:13:20 GMT"/>
					<outline text="There are two ways to export the notarised app.  The first is to scroll the table to the right to reveal the status column (the default size of the Organiser window hides this column) and mousing over the &quot;Ready to distribute&quot; entry to reveal the &quot;Export&quot; button.  The second is to select the notarised archive, scroll to the very bottom of the right-hand sidebar, and click &quot;Export Notarized App&quot;." created="Sun, 26 Dec 2021 22:18:26 GMT"/>
					<outline text="I was having some trouble notarising the application yesterday.  It seemed to be notarised by Apple without any issues, but when I tried &quot;downloading&quot; it with a development version of the website, Gatekeeper was knocking it back.  I think this may be a caching issue as I tried launching the same archive this morning and it worked without any issue.  I'm guessing it takes time for the various CDNs to updated with the notarised signature.  Either that, or there was a problem on Apple's end." created="Sun, 26 Dec 2021 22:14:39 GMT"/>
					</outline>
				</outline>
			<outline text="December 24" created="Thu, 23 Dec 2021 20:36:25 GMT" type="calendarDay" name="24">
				<outline text="I've finally finished the work of incorporating the Sparkle framework into Feed Journaler.  This now allows for automatic updates, a lot like many of the other MacOS apps that are out there.  It was easier than I expected.  The tools are included in the Sparkle framework distribution, even if you're using CocoPods, and if you just &lt;a href=&quot;https://sparkle-project.org/documentation/&quot;&gt;follow the instructions as documented&lt;/a&gt;, you should be able make it work." created="Fri, 24 Dec 2021 02:52:48 GMT" type="outline"/>
				<outline text="A Belated Update" created="Thu, 23 Dec 2021 21:00:00 GMT" type="outline">
					<outline text="Hello, it's been a while.  Thought I'd post a brief update on what's been happening recently." created="Thu, 23 Dec 2021 20:36:40 GMT"/>
					<outline text="I've finished the login item preferences in Feed Journaler.  It's now possible to configure whether Feed Journaler will start on login from the app itself, and if so, whether to show the main window.  The nice thing about this is that it uses the user's registered login items as it's source of truth, so if you change the login items from the System Preferences, the checkbox state will also be changed to reflect that (it's not perfect, it only reads the login item state when first opening the preference window)." created="Thu, 23 Dec 2021 20:37:00 GMT"/>
					<outline text="Because of how MacOS's permissions work, it also includes a preflight check to determine whether permission to use automation was already requested.  I wanted to avoid throwing up the permissions dialog when the user first visits the preferences window before changing anything, so there's actually a bit of lying going on.  If the app has detected that the user has not changed the login items preferences yet, it will simply say that the app will not open on login.  Only when the user changes something will the app ask for permission.  If there was any error getting or setting these preferences, the app assumes that it doesn't have permission and these checkboxes will simply be disabled." created="Thu, 23 Dec 2021 21:02:22 GMT"/>
					<outline text="I think this is a nice compromise between the needs of the app and the needs of the user.  It also works in the sense that permission will only be asked for when the user is actively doing something — making the connection between the user's action and the need for permissions stronger.  I'm sure there's some form of UX principal behind this.  The closest that I can think of is documentation about best practices for web permissions for notifications or location, saying that the recommended time to ask for permission is when you need that info.  I know for myself I just deny websites that ask for permission the first time I land on them without doing anything." created="Thu, 23 Dec 2021 21:48:07 GMT"/>
					<outline text="There are a few other niceties, like the message to setup the CLI tool now only showing when the user hasn't done so.  If the user has, the last selected feed config will be shown instead.  I've also fixed the display of footnotes, although they're only working for Micro.blog at this stage (and probably need better testing)." created="Thu, 23 Dec 2021 21:13:03 GMT"/>
					<outline text="In other news: I've closed up the source code of Alto Catalog and have shut down the website.  It's the first open source project I've actually shutdown.  The project is still &quot;ongoing&quot; in that I'm still using it myself, but it's just no longer available for open source.  I don't want to make a habit of this.  I guess the only saving grace is that as far as I could tell, no-one else actually cloned it, and I haven't got around to documenting anything about setting it up that I doubt anyone who cloned it would go through the process of setting it up.  I'm not sure how useful it would have been anyway, particularly without the mobile app, which hasn't been released to the Play store. " created="Thu, 23 Dec 2021 21:14:56 GMT"/>
					<outline text="I don't know what I'll do with Alto Catalog.  Part of me is wondering whether to offer it as a service of some kind.  Maybe a paid service, I don't know.  In any case, there's a lot of work that will need to happen before doing so, particularly around account and catalogue management (and even the notion of multiple catalogues, such a concept does not exists yet).  The mobile app needs some love as well.  It's functional but it's not pretty.  And all this without knowing if anyone else would be interested in it.  But I guess that's the name of the game when it come's to projects like this.  Might be worth doing anyway, just to stretch myself.  And hey, there will be at least one person who would use it." created="Thu, 23 Dec 2021 21:18:50 GMT"/>
					<outline text="As for this blog, yeah, it's in a bit of an interesting spot.  Writing in public changes the way I approach this: it feels like I'm &quot;announcing&quot; stuff, when the original goal was to just keep a journal of things I've been working on.  I'll try to swing things around back to this purpose.  I've disabled cross-posting to Micro.blog and I may also pull the Plausible analytics as well (this requires a change to the template) and just focus again on maintaining the journal without any promises of what I write here seeing the light of day (shipping is another I need to focus on).  Thank you, dear reader, for putting up with me like this, and if you get any value from this, then I'm glad." created="Thu, 23 Dec 2021 21:23:49 GMT"/>
					<outline text="Anyway, now with Christmas coming, there might not be another update for a few days.  Need some downtime before working on these projects again." created="Thu, 23 Dec 2021 21:29:50 GMT"/>
					</outline>
				</outline>
			<outline text="December 8" created="Tue, 07 Dec 2021 23:02:28 GMT" type="calendarDay" name="08">
				<outline text="Browsing AWS services to solve a particular problem sometimes reminds me of a kid going to a chocolate shop.  You see all these fascinating services, that do exactly what you need, and you just want to start using them for your project.  But then, reality sets in.  The service is too new, too expensive, or not available in the region you're working in.  And Mummy says you can't have any new services today.  Your hopes are dashed, and you're left wondering if the business could be persuaded to move everything to a new region, or if you need to stick with the broccoli of AWS like DynamoDB." created="Tue, 07 Dec 2021 23:12:29 GMT" type="outline"/>
				</outline>
			<outline text="December 7" created="Tue, 07 Dec 2021 10:22:59 GMT" type="calendarDay" name="07">
				<outline text="Dealing With Login Items Using JXA" created="Tue, 07 Dec 2021 11:03:00 GMT" type="outline">
					<outline text="I'm still trying to learn how login items work with MacOS Automation.  Using JXA to operate on them is proving to be a little bit of a challenge, mainly because the documentation of various objects is almost non-existent.  However, I think I've got most of what I need to know in order to add and remove the login item for Feed Journaler.  Here's what I know so far." created="Tue, 07 Dec 2021 10:23:12 GMT"/>
					<outline text="Login items are accessible from the &quot;System Events&quot; application.  After loading this application, you can get the list of login items via the &lt;code&gt;loginItems&lt;/code&gt;property:" created="Tue, 07 Dec 2021 10:25:11 GMT" flCodeSubs="true">
						<outline text="let systemEvents = Application('System Events');" created="Tue, 07 Dec 2021 10:25:21 GMT"/>
						<outline text="let loginItems = systemEvents.loginItems;" created="Tue, 07 Dec 2021 10:26:36 GMT"/>
						</outline>
					<outline text="This object is almost like a JavaScript array.  Almost, but not quite.  For starters, not every method you would expect is available, like the &lt;code&gt;splice()&lt;/code&gt; method for example.  Trying to call an undefined method on &lt;code&gt;loginItems&lt;/code&gt; would simply return the cryptic error message &quot;Error -1728: Can't get object&quot;. " created="Tue, 07 Dec 2021 10:26:45 GMT"/>
					<outline text="That said, it's still possible to do most of the simple things, as far as I know.  For example, iterating over the login items is pretty straight forward by using the &lt;code&gt;length&lt;/code&gt; property and &lt;code&gt;at(index)&lt;/code&gt; method (or simply using a suffix):" created="Tue, 07 Dec 2021 10:28:54 GMT" flCodeSubs="true">
						<outline text="for (let i = 0; i &lt; systemEvents.loginItems.length; i++) {" created="Tue, 07 Dec 2021 10:29:36 GMT">
							<outline text="let loginItem = systemEvents.loginItems.at(i);" created="Tue, 07 Dec 2021 10:29:59 GMT"/>
							<outline text="console.log(loginItem.name());" created="Tue, 07 Dec 2021 10:30:07 GMT"/>
							<outline text="console.log(loginItem.path());" created="Tue, 07 Dec 2021 10:30:16 GMT"/>
							</outline>
						<outline text="}" created="Tue, 07 Dec 2021 10:30:22 GMT"/>
						</outline>
					<outline text="The call to &lt;code&gt;at()&lt;/code&gt; returns a login item object.  Looking at the dictionary entry of this object reveals four properties.  The value of a property can be retrieved by calling it as a method.  For example, to get the property value of &quot;name&quot;, you would call the method &lt;code&gt;name()&lt;/code&gt;.  All of the properties are read-only, except for the &quot;hidden&quot; property, which can be changed as a regular JavaScript property:" created="Tue, 07 Dec 2021 10:30:24 GMT" flCodeSubs="true">
						<outline text="systemEvents.loginItems.at(0).hidden = true;" created="Mon, 13 Dec 2021 10:16:43 GMT"/>
						</outline>
					<outline text="To create a new login item, you can call the &lt;code&gt;systemEvents.LoginItem&lt;/code&gt; function, which takes a regular JavaScript object containing the property values of the new login item.  Adding it as an actual login item can be done by calling the &lt;code&gt;push()&lt;/code&gt; method on the &lt;code&gt;loginItems&lt;/code&gt; array:" created="Tue, 07 Dec 2021 10:44:01 GMT" flCodeSubs="true">
						<outline text="systemEvents.loginItems.push(systemEvents.LoginItem({ " created="Tue, 07 Dec 2021 10:45:40 GMT">
							<outline text="name: &quot;Application Name&quot;," created="Tue, 07 Dec 2021 10:45:49 GMT"/>
							<outline text="path: &quot;/Applications/Application Path.app&quot;" created="Tue, 07 Dec 2021 10:45:55 GMT"/>
							</outline>
						<outline text="}));" created="Tue, 07 Dec 2021 10:46:05 GMT"/>
						</outline>
					<outline text="Finally, to remove a login item, you call the &lt;code&gt;systemEvents.delete(ob)&lt;/code&gt; and pass in the login item that you want to remove:" created="Tue, 07 Dec 2021 10:46:26 GMT" flCodeSubs="true">
						<outline text="systemEvents.delete(systemEvents.loginItems.at(0));" created="Tue, 07 Dec 2021 10:47:39 GMT"/>
						</outline>
					<outline text="So, what did I learn from all this?  Well, the first is that I wish there was more documentation available for JXA scripts.  There seems to be a bit more around for doing all this in Apple Script, but I'd be more comfortable working with JavaScript myself.  Secondly, although the arrays here are quite different than the standard arrays you'd see in JavaScript, there is some consistency in how they work.  Many of the methods that I discovered on the &lt;code&gt;loginItems&lt;/code&gt; array were found by looking at other arrays demonstrated within the &lt;a href=&quot;https://github.com/JXA-Cookbook/JXA-Cookbook&quot;&gt;JXA Cookbook&lt;/a&gt;." created="Tue, 07 Dec 2021 10:49:06 GMT"/>
					<outline text="There is still much to learn.  I'd like to know how to change the &quot;hidden&quot; property of a login item, if that's even possible.  But I think I know enough to do what I need with this scripting language." created="Tue, 07 Dec 2021 10:52:59 GMT"/>
					</outline>
				</outline>
			<outline text="December 4" created="Sat, 04 Dec 2021 11:04:38 GMT" type="calendarDay" name="04">
				<outline text="I've managed to get the first part of adding a login item using MacOS Automation working.  I've got a JXA script which will read the login items to determine whether Feed Journaler is present, and a script to add Feed Journaler as a login item if it isn't already.  I settled on writing these scripts in JXA as JavaScript was a language I was comfortable with (one look at the syntax of Apple Script and... yeah, enough said).  Only problem is that there wasn't much in the way of useful documentation.  I did find &lt;a href=&quot;https://github.com/JXA-Cookbook/JXA-Cookbook&quot; style=&quot;&quot;&gt;this cookbook site&lt;/a&gt; very helpful though, along with the Dictionary available in the Script Editor." created="Sat, 04 Dec 2021 11:12:00 GMT" type="outline"/>
				</outline>
			</outline>
		</body>
	</opml>
